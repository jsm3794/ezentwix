<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Sales">
    
    <sql id="getAll">
        SELECT
            sales_item_id, product_name, customer_id,
            qty, total_price, sale_date
        FROM
            sales_items
        INNER JOIN
            sales USING (sales_id)
        INNER JOIN
            products USING(product_code)
    </sql>

    <select id="get" resultType="sales">
        SELECT 
            *
        FROM
            sales
        WHERE
            sales_id = #{sales_id}
    </select>

    <insert id="insertSales">
        INSERT INTO sales VALUES
            (sales_seq.nextval, #{customer_id}, sysdate, sysdate)
    </insert>

    <insert id="insertSalesItems">
        INSERT INTO sales_items VALUES
            (sales_items_seq.nextval, #{sales_id}, #{product_code}, #{qty}, #{unit_price}, #{total_price})
    </insert>

    <select id="findSocial" resultType="String">
        SELECT 
            social_id
        FROM
            sales
        INNER JOIN
            customer
        USING
            (customer_id)
    </select>

    <select id="salesByDate" resultType="sales">
        SELECT 
            si.sales_item_id, 
            p.product_name, 
            s.customer_id, 
            SUM(si.qty) AS qty, 
            SUM(si.total_price) AS total_price, 
            TRUNC(s.sale_date) AS sale_date
        FROM sales s
        INNER JOIN sales_items si ON s.sales_id = si.sales_id
        INNER JOIN products p ON si.product_code = p.product_code
        WHERE s.sale_date BETWEEN TO_TIMESTAMP(#{startDate}, 'YYYY-MM-DD HH24:MI:SS') 
                            AND TO_TIMESTAMP(#{endDate}, 'YYYY-MM-DD HH24:MI:SS')
        GROUP BY 
            si.sales_item_id, 
            p.product_name, 
            s.customer_id, 
            TRUNC(s.sale_date)
        ORDER BY 
            TRUNC(s.sale_date)
    </select>

    <select id="totalSalesByPeriod" resultType="sales">
        SELECT
            TRUNC(s.sale_date) AS sale_date,
            SUM(s.total_amount) AS total_sales
        FROM
            sales s
        GROUP BY
            TRUNC(s.sale_date)
        ORDER BY
            TRUNC(s.sale_date)
    </select>

    <!-- 일주일 동안 많이 팔린 상품 임시 -->
    <select id="selectWeeklyTopProducts" resultType="sales">
        SELECT 
            p.product_name, 
            SUM(si.qty) AS qty, 
            TRUNC(s.sale_date) AS sale_date
        FROM sales_items si
        INNER JOIN sales s ON si.sales_id = s.sales_id
        INNER JOIN products p ON si.product_code = p.product_code
        WHERE TRUNC(s.sale_date, 'month') = TRUNC(SYSDATE, 'month')
        GROUP BY p.product_name, TRUNC(s.sale_date)
        ORDER BY qty DESC
    </select>

    <!-- 한달간 총매출 -->
    <select id="getTotalSales" resultType="Integer">
        SELECT SUM(total_amount)
        FROM sales
        WHERE TO_CHAR(SYSDATE, 'YYYY') = TO_CHAR(sale_date, 'YYYY')
        AND TO_CHAR(SYSDATE, 'MM') = TO_CHAR(sale_date, 'MM')
    </select>

    <!-- 한달간의 영업이익 -->
    <select id="getOperatingProfit" resultType="Integer">
        SELECT SUM(total_amount) * 0.15 AS estimated_operating_profit
        FROM sales
        WHERE TO_CHAR(SYSDATE, 'YYYY') = TO_CHAR(sale_date, 'YYYY')
        AND TO_CHAR(SYSDATE, 'MM') = TO_CHAR(sale_date, 'MM')
    </select>


    
    <select id="getAll" resultType="sales">
        <include refid="getAll" />    
    </select>
</mapper>