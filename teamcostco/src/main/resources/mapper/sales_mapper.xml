<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Sales">
    
    <sql id="getAll">
        SELECT
            sales_item_id, product_name, social_id,
            qty, total_price, sale_date
        FROM
            sales_items
        INNER JOIN
            sales USING (sales_id)
        INNER JOIN
            products USING(product_code)
    </sql>

    <select id="getURL" resultType="String">
        SELECT
            thumbnail_url
        FROM
            PRODUCT_THUMBNAILS
        WHERE
            product_code = #{product_code}
    </select>

    <select id="getcustomerinfo" resultType="customer">
        SELECT
            *
        FROM
            customer
        WHERE
            social_id = #{social_id}
    </select>

    <select id="get" resultType="sales">
        SELECT 
            product_code, sales_item_id, product_name, qty, unit_price, total_price,
            payments_type, sales_status, social_id, sale_date, delivery_fee
        FROM
            sales_items 
        INNER JOIN
            sales USING(sales_id)
        INNER JOIN
            products USING(product_code)
        WHERE
        sales_item_id = #{sales_item_id}
    </select>

    <insert id="insertSales">
        INSERT INTO sales VALUES
            (sales_seq.nextval, #{social_id}, sysdate, sysdate)
    </insert>

    <insert id="insertSalesItems">
        INSERT INTO sales_items VALUES
            (sales_items_seq.nextval, #{sales_id}, #{product_code}, #{qty}, #{unit_price}, #{total_price})
    </insert>

    <select id="findSocial" resultType="String">
        SELECT 
            social_id
        FROM
            sales
        INNER JOIN
            customer
        USING
            (social_id)
    </select>

    <select id="salesByDate" resultType="sales">
        SELECT TRUNC(s.sale_date) AS salesDate, SUM(si.TOTAL_PRICE) AS totalPrice
        FROM sales s
        JOIN sales_items si ON s.SALES_ID = si.SALES_ID
        WHERE s.SALE_DATE BETWEEN TO_DATE(#{startDate}, 'YYYY-MM-DD') AND TO_DATE(#{endDate}, 'YYYY-MM-DD')
        GROUP BY TRUNC(s.sale_date)
        ORDER BY TRUNC(s.sale_date)
    </select>

    <select id="totalSalesByPeriod" resultType="sales">
        SELECT
            TRUNC(s.sale_date) AS sales_date,
            SUM(si.QTY) AS total_sales
        FROM
            sales s
        JOIN sales_items si ON s.SALES_ID = si.SALES_ID
        GROUP BY
            TRUNC(s.sale_date)
        ORDER BY
            TRUNC(s.sale_date)
    </select>

    <select id="selectWeeklyTopProducts" resultType="sales">
        SELECT si.PRODUCT_CODE, SUM(si.QTY) AS sold_qty, TRUNC(s.sale_date) AS sold_date
        FROM sales s
        JOIN sales_items si ON s.SALES_ID = si.SALES_ID
        WHERE TRUNC(s.sale_date, 'MM') = TRUNC(SYSDATE, 'MM')
        GROUP BY si.PRODUCT_CODE, TRUNC(s.sale_date)
        ORDER BY sold_qty DESC
    </select>

    <select id="getTotalSales" resultType="Integer">
        SELECT SUM(si.TOTAL_PRICE)
        FROM sales s
        JOIN sales_items si ON s.SALES_ID = si.SALES_ID
        WHERE TO_CHAR(s.SALE_DATE, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
        AND TO_CHAR(s.SALE_DATE, 'MM') = TO_CHAR(SYSDATE, 'MM')
    </select>

    <select id="getOperatingProfit" resultType="Integer">
        SELECT SUM(si.TOTAL_PRICE) * 0.15 AS estimated_operating_profit
        FROM sales s
        JOIN sales_items si ON s.SALES_ID = si.SALES_ID
        WHERE TO_CHAR(s.SALE_DATE, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
        AND TO_CHAR(s.SALE_DATE, 'MM') = TO_CHAR(SYSDATE, 'MM')
    </select>
    
    <select id="getAll" resultType="sales">
        <include refid="getAll" />    
    </select>
</mapper>